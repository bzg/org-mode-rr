#+TITLE: simgrid-user-days

* Org feature requests

** Aynschronous babel calls

It should be possible to run C-c C-c on a block and have the babel
call run asynchronously.

** Babel workflow engine

- #+call [block1] [block2] :: call several blocks independantly.  Each
     block can be called asynchronously since its side-effects are not
     relevant for running the other code blocks.

- #+run [block1] [block2] :: run [block1] and [block2] *sequentially*.
     The whole call to #+run can run asynchronously, but all blocks
     will be called in sequential order and the n block needs to
     finish before n+1 can start.

- #+map [block] [&rest] :: would map block over a list of data.  We
     still need to define the format for the "list of data".  The
     whole call to #+map could run asynchronously.

- #+thread [data] [block1] [block2] :: call block1 with data, then
     block2 with the output from block1, etc.  (Note that this is
     similar to -> and ->> in Clojure, but we don't distinguish the
     two as there is no argument order in babel blocks.)

** Babel workflow browser

The same way that C-c ' on #+TBLFM lines allows to browse the formula
and see the corresponding references, C-c ' on #+call/map/run would
allow to see the corresponding blocks.

** Signature and typing?

- Code blocks could describe the types of data they accept, and the
  type of data they emit.

- An option would make it possible to type-check the data before they
  are processed.

- If the Babel browser, we could display the signatures as well.

** Consistent handling of stderr

For now stderr cannot always be captured in Org buffers, it depends on
the backend implementation.

*** Some ideas for what this would look like

By default, we should integrate stdout and stderr in #+RESULTS for
backward compatibility. It could look like for an example with no
stderr like this (the same as it did before):

#+BEGIN_EXAMPLE
#+RESULTS:
: 5
#+END_EXAMPLE

If there is output on stderr, we might see

#+BEGIN_EXAMPLE
#+RESULTS:
: 5

stderr: 
Some kind of message
#+END_EXAMPLE

It might be possible to have a header to split the messages,
e.g. :results output :stderr. The stderr could be fontified, e.g. in
red to draw attention.

#+BEGIN_EXAMPLE
#+RESULTS:
: 5

#+STDERR:
Some error message
#+END_EXAMPLE

* Org /ad hoc/ tools

** Create a set of better "<" templates

For example: 

<R for

#+BEGIN_SRC R [FIXME: see Arnaud's example]
#+END_SRC

Here are a few of the ones I (JRK) use:
#+BEGIN_SRC emacs-lisp
;; add <p for python expansion
(add-to-list 'org-structure-template-alist
             '("p" "#+BEGIN_SRC python\n?\n#+END_SRC" "<src lang=\"python\">\n?\n</src>"))

;; add <por for python expansion with raw output
(add-to-list 'org-structure-template-alist
             '("por" "#+BEGIN_SRC python :results output raw\n?\n#+END_SRC" "<src lang=\"python\">\n?\n</src>"))

;; add <pv for python expansion with value
(add-to-list 'org-structure-template-alist
             '("pv" "#+BEGIN_SRC python :results value\n?\n#+END_SRC" "<src lang=\"python\">\n?\n</src>"))

;; add <el for emacs-lisp expansion
(add-to-list 'org-structure-template-alist
             '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC" "<src lang=\"emacs-lisp\">\n?\n</src>"))

;; add <sh for shell
(add-to-list 'org-structure-template-alist
             '("sh" "#+BEGIN_SRC sh\n?\n#+END_SRC" "<src lang=\"shell\">\n?\n</src>"))
#+END_SRC


* Babel feature requests

Inserting comments around snippets of code expanded with noweb:
http://article.gmane.org/gmane.emacs.orgmode/87472

* General Emacs tools

- An emacs starter kit for experimental computer scientist?

This is a tricky one, although it is the purpose of my jmax starter kit: http://github.com/jkitchin/jmax. I use it with my students for teaching and research. It is not as polished as prelude or the emacs24-starter-kit, but configures org the way I use it, and provides a lot of functionality I like, particularly for scientific publishing and analysis. It is self-contained, even including precompiled emacs for windows. 

- Maybe hosting a list of VM with predefined configurations?

* DONE Generic external tools
  CLOSED: [2014-08-11 Mon 07:34]
  :PROPERTIES:
  :date:     2014/08/11 07:34:39
  :updated:  2014/08/11 07:34:39
  :END:

- Explore Org-mode parser and whether they let anyone use Org Babel
  outside of Emacs.

I recently learned about 
#+BEGIN_SRC emacs-lisp
#!/usr/bin/env emacs --script
#+END_SRC

which would make it easy to write shell scripts that could interact with other shell scripts more easily. Here is a potential example that extracts data from a table in an org file.

#+tblname: test
| x | y |
|---+---|
| 1 | 2 |
| 4 | 5 |

This code illustrates the idea. 

#+BEGIN_SRC emacs-lisp :tangle org-table.el :shebang #!/Applications/Emacs.app/Contents/MacOS/Emacs --script
;; org-table tblname orgfile
;; print a table from an org-file as a comma-delimited data to stdout 

(let ((tblname (pop command-line-args-left))
      (org-file (pop command-line-args-left)))
  (find-file org-file)
  (re-search-forward (format "#\\+tblname:\\s-*%s$" tblname))
  (forward-line) ; to get into table
  (dolist (row (org-table-to-lisp))
    (unless (eq row 'hline)
      (princ (mapconcat 'identity row ","))
      (princ "\n"))))
#+END_SRC

elisp:org-babel-tangle

Now, we test it by getting out the first column with a classic unix pipe:
#+BEGIN_SRC sh
./org-table.el test notes.org | cut -d , -f 1
#+END_SRC

#+RESULTS:
: x
: 1
: 4

Now we have a command-line command that can extract data from a table, which could be piped elsewhere.

Maybe I missed the idea of this section, which was about using org-babel outside of emacs. I think you could call a named code block by a similar method. 

#+BEGIN_SRC emacs-lisp :tangle org-call.el :shebang #!/Applications/Emacs.app/Contents/MacOS/Emacs --script
;; org-run blockname org-file
;; run a code block in an org file
(let ((blockname (pop command-line-args-left))
      (org-file (pop command-line-args-left)))
  (find-file org-file)
  (re-search-forward (format "#\\+name:\\s-*%s$" blockname))
  (forward-line)

  ;; since we start with a fresh emacs, we have to configure some things.
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)))
  (let ((org-confirm-babel-evaluate nil))
    (org-babel-execute-src-block)))
#+END_SRC

Here is a simple code block.
#+name: python-block
#+BEGIN_SRC python
import time
with open('results.dat', 'w') as f:
    f.write(time.asctime())
#+END_SRC

#+RESULTS: python-block
: Mon Aug 11 07:43:09 2014

We call it at the command line like this.
#+BEGIN_SRC sh
./org-call.el python-block notes.org

# and to see evidence that the file is updated
cat results.dat
#+END_SRC

#+RESULTS:
: Mon Aug 11 07:47:29 2014

This is not a speedy way to run it, but it works! This approach is somewhat limited to side effects. It is not easy to see nice ways to allow variables to be passed in, for example.

* Templates for journals

- http://orgmode.org/worg/exporters/plos-one-template-worg.html

Other :

- https://github.com/vikasrawal/orgpaper/blob/master/orgpapers.org

- See https://github.com/jkitchin/jmax/tree/master/examples for examples of APS, ACS, RSC, Elsevier, Springer, etc... I use ox-manuscript (https://github.com/jkitchin/jmax/blob/master/ox-manuscript.el) to export to LaTeX.

* Videos about using Org in reproducible research

- [[https://www.youtube.com/watch?v=1-dUkyn_fZA][Emacs + org-mode + python in reproducible research; SciPy 2013 Presentation]]
- [[https://vimeo.com/99167082][Emacs Org-mode Bibtex Screencast]]
- https://www.youtube.com/watch?v=fgizHHd7nOo b. Using org-ref


* Bibliographic tools

- https://github.com/jkitchin/jmax/blob/master/org/org-ref.org

* Testimonies

- [[https://lists.gnu.org/archive/html/emacs-orgmode/2014-07/msg00162.html][Marvin M. Doyley: An Org centric research lab]]
- http://kitchingroup.cheme.cmu.edu/blog/2014/08/08/What-we-are-using-org-mode-for/
